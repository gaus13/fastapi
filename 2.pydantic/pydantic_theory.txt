Pydantic is a data validation library and type validation

Hereâ€™s a concise but **powerful list of Pydantic theory notes** that you can keep as your personal **interview-ready cheat sheet**. These cover key concepts and are written in a clear, memorable way, especially for FastAPI/backend development interviews.

---

## ðŸ§  PYDANTIC KEY THEORY NOTES (For Interviews & Quick Revision)

---

### âœ… 1. What is Pydantic?

> **Pydantic is a Python library for data validation and settings management using Python type hints.**
> It ensures that input data (e.g., API request body) is correct and converts it to the right types.

---

### âœ… 2. Core Concept: Models = Classes with Types

```python
from pydantic import BaseModel

class User(BaseModel):
    name: str
    age: int
```

* Inherits from `BaseModel`
* Automatically **validates** and **parses** input data

---

### âœ… 3. Data Validation & Parsing

```python
User(name="Alice", age="30")
# Pydantic will auto-convert '30' (str) to int
```

Pydantic supports **type coercion** like:

* str to int
* str to datetime
* str to bool

---

### âœ… 4. Default Values

```python
class User(BaseModel):
    name: str
    age: int = 18  # default if not provided
```

---

### âœ… 5. Optional Fields

```python
from typing import Optional

class User(BaseModel):
    name: str
    email: Optional[str] = None
```

---

### âœ… 6. Nested Models

```python
class Address(BaseModel):
    city: str
    pin: int

class User(BaseModel):
    name: str
    address: Address
```

Supports nested validation out of the box.

---

### âœ… 7. List / Dict Support

```python
from typing import List, Dict

class User(BaseModel):
    tags: List[str]
    scores: Dict[str, int]
```

---

### âœ… 8. Request Body in FastAPI

```python
@app.post("/user")
def create_user(user: User):
    return user
```

* FastAPI uses Pydantic to **validate and document** the request body
* Auto-generates **Swagger UI** based on Pydantic model

---

### âœ… 9. Aliases

```python
class User(BaseModel):
    full_name: str = Field(..., alias="fullName")
```

Use when incoming JSON uses camelCase instead of snake\_case.

---

### âœ… 10. Validators

Use custom validation with `@validator`:

```python
from pydantic import validator

class User(BaseModel):
    username: str

    @validator("username")
    def must_not_be_empty(cls, v):
        if not v:
            raise ValueError("Username cannot be empty")
        return v
```

---

### âœ… 11. `.dict()`, `.json()`, `.parse_obj()`

```python
user.dict()      # converts to Python dict
user.json()      # converts to JSON string
User.parse_obj({ "name": "Ali", "age": 30 })  # Create from dict
```

---

### âœ… 12. Immutable Models

```python
class Config:
    allow_mutation = False
```

Set model values to be read-only (e.g., after parsing from database).

---

### âœ… 13. Settings Management (for environment variables)

```python
from pydantic import BaseSettings

class Settings(BaseSettings):
    db_url: str
    secret_key: str

    class Config:
        env_file = ".env"
```



| Concept                 | Why It Matters                           |
| ----------------------- | ---------------------------------------- |
| âœ… Type coercion         | Handles dirty/invalid input data cleanly |
| âœ… `@validator`          | Shows custom business logic skills       |
| âœ… Nested models         | API structure & scalability              |
| âœ… `.dict()` / `.json()` | Useful for serialization/deserialization |
| âœ… BaseSettings          | Shows DevOps/config skills               |

---


# 02-07-2025
1)Emailstr is a built in pydantic func that is used to validate the correct format of a email.
2)Anyurl is also a built in func for url validation.
3)Field func in pydantic is used to create custom validation cases
 It is also used to attach metadata(description) along with the help of Annotated func present in typing module.
 like you can decide what kind of data you want from the user/client

 4)Field validator is a classmethod (can be operated in two mode before and after)
In Pydantic v2, the @field_validator decorator supports an optional parameter called mode.
It controls when the validator runs in the data parsing lifecycle.
when mode is set to 'before' means Raw input data is got ie, before type coercion and mode 'after' is after type coercion.

5)Model validator: works on whole pydantic model